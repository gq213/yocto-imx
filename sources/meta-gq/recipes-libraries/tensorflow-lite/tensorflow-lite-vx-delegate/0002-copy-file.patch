From 07b927f286ef4a2ca75d981175eca66d6df00c9c Mon Sep 17 00:00:00 2001
From: gq213 <gaoqiang1211@gmail.com>
Date: Thu, 21 Nov 2024 21:26:45 +0800
Subject: [PATCH] copy file

---
 0001-modify-url.patch | 160 ++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 160 insertions(+)
 create mode 100644 0001-modify-url.patch

diff --git a/0001-modify-url.patch b/0001-modify-url.patch
new file mode 100644
index 0000000..3b683cb
--- /dev/null
+++ b/0001-modify-url.patch
@@ -0,0 +1,160 @@
+From 309338405651e4ea09421504010ef1a798172dc1 Mon Sep 17 00:00:00 2001
+From: gq213 <gaoqiang1211@gmail.com>
+Date: Wed, 20 Nov 2024 22:30:59 +0800
+Subject: [PATCH] modify url
+
+---
+ cmake/DownloadFP16.cmake  |  2 +-
+ src/runtime.c             | 27 +++++++++++----------------
+ src/subgraph/even-split.c | 26 ++++++++++++--------------
+ 3 files changed, 24 insertions(+), 31 deletions(-)
+
+diff --git a/cmake/DownloadFP16.cmake b/cmake/DownloadFP16.cmake
+index f7c567017..c59592cda 100644
+--- a/cmake/DownloadFP16.cmake
++++ b/cmake/DownloadFP16.cmake
+@@ -12,7 +12,7 @@ PROJECT(fp16-download NONE)
+ 
+ INCLUDE(ExternalProject)
+ ExternalProject_Add(fp16
+-  URL https://github.com/Maratyszcza/FP16/archive/0a92994d729ff76a58f692d3028ca1b64b145d91.zip
++  URL http://127.0.0.1/mydir/nxp/file/FP16-0a92994d729ff76a58f692d3028ca1b64b145d91.zip
+   URL_HASH SHA256=e66e65515fa09927b348d3d584c68be4215cfe664100d01c9dbc7655a5716d70
+   SOURCE_DIR "${CMAKE_BINARY_DIR}/FP16-source"
+   BINARY_DIR "${CMAKE_BINARY_DIR}/FP16"
+diff --git a/src/runtime.c b/src/runtime.c
+index 0c4649017..d018743a7 100644
+--- a/src/runtime.c
++++ b/src/runtime.c
+@@ -511,23 +511,18 @@ enum xnn_status xnn_setup_runtime(
+ 
+   for (size_t i = 0; i < runtime->num_ops; i++) {
+     const struct xnn_operator_data* opdata = &runtime->opdata[i];
+-    if (opdata->operator_objects[0] == NULL) {
+-      // Operator was removed during optimization
+-      continue;
+-    }
+-
+-    // Ensure that weights cache is finalized.
+-    struct xnn_weights_cache* weights_cache = opdata->operator_objects[0]->weights_cache;
+-    if (weights_cache != NULL && !xnn_weights_cache_is_finalized(weights_cache)) {
+-      xnn_log_error("weights cache needs to be finalized before setup/infer");
+-      return xnn_status_invalid_state;
+-    }
++    for (size_t j = 0; j < XNN_MAX_OPERATOR_OBJECTS; j++) {
++      if (opdata->operator_objects[j] == NULL) {
++        // Operator was removed during optimization
++        continue;
++      }
+ 
+-    assert(opdata->setup != NULL);
+-    const enum xnn_status status = opdata->setup(opdata, runtime->blobs, runtime->num_blobs, runtime->threadpool);
+-    if (status != xnn_status_success) {
+-      xnn_log_error("failed to setup runtime: error in operator #%zu", i);
+-      return status;
++      assert(opdata->setup != NULL);
++      const enum xnn_status status = opdata->setup(opdata, runtime->blobs, runtime->num_blobs, runtime->threadpool);
++      if (status != xnn_status_success) {
++        xnn_log_error("failed to setup runtime: error in operator #%zu", i);
++        return status;
++      }
+     }
+   }
+ 
+diff --git a/src/subgraph/even-split.c b/src/subgraph/even-split.c
+index 6c360d9fd..e21ef9212 100644
+--- a/src/subgraph/even-split.c
++++ b/src/subgraph/even-split.c
+@@ -250,7 +250,6 @@ static enum xnn_status setup_even_split_operator_helper(
+   const uint32_t num_blobs,
+   const struct xnn_operator_data* opdata,
+   size_t index,
+-  const size_t channels,
+   const void* input_data,
+   pthreadpool_t threadpool)
+ {
+@@ -261,12 +260,14 @@ static enum xnn_status setup_even_split_operator_helper(
+     return xnn_status_success;
+   }
+ 
++  const size_t channels = opdata->operator_objects[index]->channels;
++
+   assert(output_id < num_blobs);
+   const struct xnn_blob* output_blob = blobs + output_id;
+   void* output_data = output_blob->data;
+   assert(output_data != NULL);
+ 
+-  switch (opdata->operator_objects[0]->type) {
++  switch (opdata->operator_objects[index]->type) {
+     #ifndef XNN_NO_F16_OPERATORS
+       case xnn_operator_type_copy_nc_x16: {
+         return xnn_setup_copy_nc_x16(
+@@ -305,14 +306,13 @@ static enum xnn_status setup_even_split2_operator(
+   const void* input_data = input_blob->data;
+   assert(input_data != NULL);
+ 
+-  const size_t channels = opdata->operator_objects[0]->channels;
+   enum xnn_status status = xnn_status_success;
+ 
+-  status = setup_even_split_operator_helper(blobs, num_blobs, opdata, 0, channels, input_data, threadpool);
++  status = setup_even_split_operator_helper(blobs, num_blobs, opdata, 0, input_data, threadpool);
+   if (status != xnn_status_success) {
+     return status;
+   }
+-  status = setup_even_split_operator_helper(blobs, num_blobs, opdata, 1, channels, input_data, threadpool);
++  status = setup_even_split_operator_helper(blobs, num_blobs, opdata, 1, input_data, threadpool);
+   if (status != xnn_status_success) {
+     return status;
+   }
+@@ -335,18 +335,17 @@ static enum xnn_status setup_even_split3_operator(
+   const void* input_data = input_blob->data;
+   assert(input_data != NULL);
+ 
+-  const size_t channels = opdata->operator_objects[0]->channels;
+   enum xnn_status status = xnn_status_success;
+ 
+-  status = setup_even_split_operator_helper(blobs, num_blobs, opdata, 0, channels, input_data, threadpool);
++  status = setup_even_split_operator_helper(blobs, num_blobs, opdata, 0, input_data, threadpool);
+   if (status != xnn_status_success) {
+     return status;
+   }
+-  status = setup_even_split_operator_helper(blobs, num_blobs, opdata, 1, channels, input_data, threadpool);
++  status = setup_even_split_operator_helper(blobs, num_blobs, opdata, 1, input_data, threadpool);
+   if (status != xnn_status_success) {
+     return status;
+   }
+-  status = setup_even_split_operator_helper(blobs, num_blobs, opdata, 2, channels, input_data, threadpool);
++  status = setup_even_split_operator_helper(blobs, num_blobs, opdata, 2, input_data, threadpool);
+   if (status != xnn_status_success) {
+     return status;
+   }
+@@ -369,22 +368,21 @@ static enum xnn_status setup_even_split4_operator(
+   const void* input_data = input_blob->data;
+   assert(input_data != NULL);
+ 
+-  const size_t channels = opdata->operator_objects[0]->channels;
+   enum xnn_status status = xnn_status_success;
+ 
+-  status = setup_even_split_operator_helper(blobs, num_blobs, opdata, 0, channels, input_data, threadpool);
++  status = setup_even_split_operator_helper(blobs, num_blobs, opdata, 0, input_data, threadpool);
+   if (status != xnn_status_success) {
+     return status;
+   }
+-  status = setup_even_split_operator_helper(blobs, num_blobs, opdata, 1, channels, input_data, threadpool);
++  status = setup_even_split_operator_helper(blobs, num_blobs, opdata, 1, input_data, threadpool);
+   if (status != xnn_status_success) {
+     return status;
+   }
+-  status = setup_even_split_operator_helper(blobs, num_blobs, opdata, 2, channels, input_data, threadpool);
++  status = setup_even_split_operator_helper(blobs, num_blobs, opdata, 2, input_data, threadpool);
+   if (status != xnn_status_success) {
+     return status;
+   }
+-  status = setup_even_split_operator_helper(blobs, num_blobs, opdata, 3, channels, input_data, threadpool);
++  status = setup_even_split_operator_helper(blobs, num_blobs, opdata, 3, input_data, threadpool);
+   if (status != xnn_status_success) {
+     return status;
+   }
+-- 
+2.25.1
+
-- 
2.25.1

